language: cpp

cache: ccache

matrix:
  fast_finish: true
  include:
    - os: linux
      dist: trusty
      addons:
        apt:
          sources:
            - deadsnakes
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-7
          packages:
            - build-essential
            #- gcc-4.8-multilib
            #- gcc-4.9
            #- g++-4.9
            - clang-7
            - libstdc++-7-dev
            - cmake
            - perl
            - python3.5
            - flex
            - bison
            - autoconf
            - automake
            - libtool
            - pkg-config
            - m4
            - zlib1g-dev
            - upx
            - openssl
      env:
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7 && NPROC=$(nproc)"
        # We need this so that ccache does not cause compilation errors.
        # e.g. retdec/tests/utils/string_tests.cpp:276:2: error: stray '\' in program
        - CCACHE_CPP2=true

    - os: osx
      osx_image: xcode8.3
      env:
        - MATRIX_EVAL="NPROC=$(sysctl -n hw.physicalcpu)"
        - CCACHE_CPP2=true

install:
  # We need to install newer versions of Flex and Bison on MacOS X.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install flex bison; fi
  # ccache is not installed on OS X.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install ccache; fi
  # python 3
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew upgrade python; fi

before_script:
  - eval "${MATRIX_EVAL}"
  # We need to use newer versions of Flex and Bison on MacOS X (the ones from Homebrew).
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export CMAKE_INCLUDE_PATH="/usr/local/opt/flex/include"; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export CMAKE_LIBRARY_PATH="/usr/local/opt/flex/lib;/usr/local/opt/bison/lib"; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export PATH="/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH"; fi
  # We need to add ccache before everything else into PATH.
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi

script:
  - mkdir build && cd build
  # We use "-O0" to speed up the build.
  # "-O0" causes segfaults in LLVM if we do not use "-DNDEBUG" as well.
  - cmake -DCMAKE_CXX_FLAGS_RELEASE="-O0 -g0 -DNDEBUG" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(pwd)/install" -DRETDEC_TESTS=OFF -DRETDEC_DEV_TOOLS=OFF ..
  - echo "Building with $NPROC jobs"
  - time make install -j $NPROC
  # Check that install is movable and that it does not need the build directory.
  - mv install ../retdec-install
  - cd ..
  - rm -rf build
  # Run unit tests.
  #- python3 retdec-install/bin/retdec-tests-runner.py
  # Run the decompilation script.
  #- python3 retdec-install/bin/retdec-decompiler.py --help
  # Run a simple decompilation.
  #- echo -e '#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n  printf("hello world\\n");\n  return 0;\n}\n' > hello-orig.c
  #- cat hello-orig.c
  #- $CC -m32 -o hello hello-orig.c
  #- ./hello
  #- python3 retdec-install/bin/retdec-decompiler.py hello
  #- cat hello.c
  #- grep "int main(int argc, char \*\* argv)" hello.c
  # Create built tarball on Linux
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then rm -rf retdec-install/share retdec-install/bin/*-tests-*; echo "size of retdec-install:"; du -s retdec-install; tar cfJ retdec-linux.tar.xz retdec-install; du -s retdec-linux*; fi

branches:
  only:
    # Pushes and PRs to the master branch.
    - master
    # Version tags.
    - /^v?\d+\.\d+.*$/

notifications:
  email:
    on_success: never

before_deploy:
  # Set up git user name and tag this commit
  - git config --local user.name "none"
  - git config --local user.email "no@no.no"
  - git tag -d prerelease || true
  - git tag prerelease

deploy:
  provider: releases
  api_key:
    secure: $GH_API_KEY
  file_glob: true
  file: retdec-linux.tar.xz
  skip_cleanup: true
  overwrite: true
  prerelease: true
  name: prerelease
  on:
    branch: master
    condition: $TRAVIS_OS_NAME = linux
